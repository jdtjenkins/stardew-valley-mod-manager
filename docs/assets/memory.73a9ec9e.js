import{errors as e}from"./util.b58b4449.js";const{INVALID:i,GONE:t,MISMATCH:s,MOD_ERR:n,SYNTAX:o,SECURITY:r,DISALLOWED:h}=e;class l{constructor(e){this.fileHandle=e,this.file=e.file,this.size=e.file.size,this.position=0}write(e){if("object"==typeof e)if("write"===e.type){if(Number.isInteger(e.position)&&e.position>=0){if(this.size<e.position)throw new DOMException(...i);this.position=e.position}if(!("data"in e))throw new DOMException(...o("write requires a data argument"));e=e.data}else{if("seek"===e.type){if(Number.isInteger(e.position)&&e.position>=0){if(this.size<e.position)throw new DOMException(...i);return void(this.position=e.position)}throw new DOMException(...o("seek requires a position argument"))}if("truncate"===e.type){if(Number.isInteger(e.size)&&e.size>=0){let i=this.file;return i=e.size<this.size?i.slice(0,e.size):new File([i,new Uint8Array(e.size-this.size)],i.name),this.size=i.size,this.position>i.size&&(this.position=i.size),void(this.file=i)}throw new DOMException(...o("truncate requires a size argument"))}}e=new Blob([e]);let t=this.file;const s=t.slice(0,this.position),n=t.slice(this.position+e.size);let r=this.position-s.size;r<0&&(r=0),t=new File([s,new Uint8Array(r),e,n],t.name),this.size=t.size,this.position+=e.size,this.file=t}close(){if(this.fileHandle.deleted)throw new DOMException(...t);this.fileHandle.file=this.file,this.file=this.position=this.size=null,this.fileHandle.onclose&&this.fileHandle.onclose(this.fileHandle)}}class c{constructor(e,i,t=!0){this.file=i||new File([],e),this.name=e,this.kind="file",this.deleted=!1,this.writable=t,this.readable=!0}getFile(){if(this.deleted)throw new DOMException(...t);return this.file}createWritable(e){if(!this.writable)throw new DOMException(...h);if(this.deleted)throw new DOMException(...t);return new l(this)}destroy(){this.deleted=!0,this.file=null}}class f{constructor(e,i=!0){this.name=e,this.kind="directory",this.deleted=!1,this.entries={},this.writable=i,this.readable=!0}async*getEntries(){if(this.deleted)throw new DOMException(...t);yield*Object.values(this.entries)}getDirectoryHandle(e,i={}){if(this.deleted)throw new DOMException(...t);const n=this.entries[e];if(n){if(n instanceof c)throw new DOMException(...s);return n}if(i.create)return this.entries[e]=new f(e);throw new DOMException(...t)}getFileHandle(e,i={}){const n=this.entries[e],o=n instanceof c;if(n&&o)return n;if(n&&!o)throw new DOMException(...s);if(!n&&!i.create)throw new DOMException(...t);return!n&&i.create?this.entries[e]=new c(e):void 0}removeEntry(e,i){const s=this.entries[e];if(!s)throw new DOMException(...t);s.destroy(i.recursive),delete this.entries[e]}destroy(e){for(let i of Object.values(this.entries)){if(!e)throw new DOMException(...n);i.destroy(e)}this.entries={},this.deleted=!0}}const w=new f("");export default e=>w;export{c as FileHandle,f as FolderHandle,l as Sink};
